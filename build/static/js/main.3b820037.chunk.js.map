{"version":3,"sources":["components/ContactForm.js","components/Contact.js","components/ContactList.js","components/Filter.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["ContactForm","props","onSubmit","className","value","name","onChange","nameChange","number","numberChange","type","Contact","person","onClick","id","ContactList","persons","show","showContacts","filter","toUpperCase","includes","map","i","key","Filter","inputValue","showChange","Notification","message","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setShow","statusMessage","setStatusMessage","names","useEffect","personService","initialPersons","showStatus","setTimeout","event","preventDefault","contactObject","length","window","confirm","toUpdate","indexOf","updated","returnedPerson","splice","catch","error","concat","target","toRemove","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b820037.chunk.js","sourcesContent":["import React from 'react';\n\nconst ContactForm = (props) => {\n    return (\n      <>\n        <h2>Add new contact</h2>\n        <form onSubmit={props.onSubmit} className='contactForm'>\n        <div>\n          name:\n          <input\n            value={props.name}\n            onChange={props.nameChange}\n          />\n        </div>\n        <div>\n          number:\n          <input\n            value={props.number}\n            onChange={props.numberChange}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </>\n    )\n  }\n\n  export default ContactForm;","import React from 'react';\n\nconst Contact = ({ person, onClick }) => {\n    return (\n      <li className='contact'>\n        {person.name} {person.number}\n        <button onClick={() => onClick(person.id)}>\n          remove\n        </button>\n      </li>\n    )\n  }\n\n  export default Contact;","import React from 'react';\nimport Contact from './Contact';\n\nconst ContactList = ({ persons, show, onClick }) => {\n    const showContacts = (show === '')\n    ? persons\n    : persons.filter(person =>\n        person.name.toUpperCase().includes(show.toUpperCase()))\n        \n    return (\n      <ul className='contacts'>\n        {showContacts.map((person, i) =>\n          <Contact key={person.name} person={person} onClick={onClick} />\n        )}\n      </ul>\n    )\n  }\n\n  export default ContactList;","import React from 'react';\n\nconst Filter = ({ inputValue, showChange }) => {\n    return (\n      <div>\n        filter by name:\n        <input\n          value={inputValue}\n          onChange={showChange}\n        />\n      </div>\n    )\n}\n\nexport default Filter;","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"status\">\n        {message}\n      </div>\n    )\n  }\n\n  export default Notification;","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n  \nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n  \nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { \n  getAll, \n  create, \n  update,\n  remove\n}","import React, { useState, useEffect } from 'react';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport Notification from './components/Notification';\nimport personService from './services/persons';\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ show, setShow ] = useState('')\n  const [statusMessage, setStatusMessage] = useState('')\n  const names = persons.map(person => person.name.toUpperCase())\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleShowChange = (event) => setShow(event.target.value)\n\n  const showStatus = (message) => {\n    setStatusMessage(message)\n    setTimeout(() => {\n      setStatusMessage(null)\n    }, 4000)\n  }\n\n  const addContact = (event) => {\n    event.preventDefault()\n    const contactObject = {\n      name: newName,\n      number: newNumber\n    }\n    const duplicate = (persons.length > 0)\n    ? names.includes(newName.toUpperCase())\n    : false\n\n    if (duplicate) {\n      if (window.confirm(`${newName} is already added to phonebook. Do you want to replace the old number with a new one?`)) {\n        const toUpdate = names.indexOf(newName.toUpperCase())\n        const updated = persons\n        personService\n          .update(toUpdate + 1, contactObject)\n          .then(returnedPerson => {\n            updated.splice(toUpdate, 1, contactObject)\n            setPersons(updated)\n            showStatus(\n              `The number of ${newName} has been replaced.`\n            )\n            setNewName('')\n            setNewNumber('')\n          })\n          .catch(error => {\n            showStatus(\n              `Information of ${newName} has already been removed from the server.`\n            )\n            setPersons(persons.filter(person => person.id !== toUpdate))\n          })\n      }\n    }\n    else {\n      personService\n        .create(contactObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          showStatus(\n            `${newName} added to phonebook.`\n          )\n          setNewName('')\n          setNewNumber('')\n      })\n    }\n  }\n\n  const removeContact = (id) => {\n    const toRemove = persons.find(person => person.id === id).name\n    \n    if (window.confirm(`Are you sure you want to remove ${toRemove}?`)) {\n      personService\n        .remove(id)\n        .then(() => {\n          setPersons(persons.filter(person => person.id !== id))\n          showStatus(\n            `${toRemove} removed from phonebook.`\n          )\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={statusMessage} />\n      <ContactForm\n        onSubmit={addContact}\n        name={newName}\n        nameChange={handleNameChange}\n        number={newNumber}\n        numberChange={handleNumberChange}\n        />\n      <h2>Contacts</h2>\n      <Filter inputValue={show} showChange={handleShowChange} />\n      <ContactList persons={persons} show={show} onClick={removeContact} />\n    </div>\n  )\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}